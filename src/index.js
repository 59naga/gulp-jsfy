// Generated by CoffeeScript 1.8.0
var jsfy, path,
  __slice = [].slice;

path = require('path');

jsfy = function(options) {
  var queues, through;
  if (options == null) {
    options = {};
  }
  queues = [];
  through = require('through');
  return through(function(file) {
    if (file.path.substr(-4) !== '.css') {
      return this.emit('data', file);
    }
    return queues.push((function(_this) {
      return function(next) {
        return jsfy.parse(file, options, function(error, js) {
          if (error != null) {
            return next(error);
          }
          file.path += '.js';
          file.contents = new Buffer(js);
          _this.emit('data', file);
          return next(null);
        });
      };
    })(this));
  }, function() {
    var async;
    async = require('async');
    return async.parallel(queues, (function(_this) {
      return function(error) {
        if (error != null) {
          throw error;
        }
        return _this.emit('end');
      };
    })(this));
  });
};

jsfy.parse = function() {
  var args, callback, deval, file, options;
  file = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  callback = void 0;
  options = void 0;
  args.forEach(function(arg) {
    switch (typeof arg) {
      case 'function':
        return callback = arg;
      case 'object':
        return options = arg;
    }
  });
  deval = (function(_this) {
    return function(error, file) {
      var name;
      if (error != null) {
        return callback(error);
      }
      name = path.basename(file.path, '.css');
      if (options.dataurl) {
        return jsfy.replaceToDataURI(file, options, function(error, css) {
          if (error != null) {
            return callback(error);
          }
          file.contents = new Buffer(css);
          return callback(null, jsfy.deval(file, name, options));
        });
      } else {
        return callback(null, jsfy.deval(file, name, options));
      }
    };
  })(this);
  if (options.wrapInClass) {
    return jsfy.wrap(file, options, (function(_this) {
      return function(error, css) {
        if (error != null) {
          return deval(error);
        }
        file.contents = new Buffer(css);
        return deval(null, file, null, options);
      };
    })(this));
  } else {
    return deval(null, file, null, options);
  }
};

jsfy.deval = function() {
  var args, change, charset, css, name, options;
  css = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  name = void 0;
  charset = 'utf8';
  options = {};
  args.forEach(function(arg) {
    switch (typeof arg) {
      case 'string':
        return name = arg;
      case 'object':
        return options = arg;
    }
  });
  if (options.charset === false) {
    charset = '';
  }
  change = require('change-case');
  return "(function(){\n  var link=document.createElement('link');\n  link.setAttribute('data-name','" + (change.snakeCase(name)) + "');\n  link.setAttribute('rel','stylesheet');\n  link.setAttribute('href',\"" + (jsfy.dataurify(css, 'text/css', charset)) + "\");\n  document.head.appendChild(link);\n})();";
};

jsfy.dataurify = function(str, mime, charset) {
  var data;
  if (charset == null) {
    charset = '';
  }
  data = typeof str === 'object' ? str.contents : new Buffer(str);
  if (charset.length > 0 && charset.indexOf(';') !== 0) {
    charset = ";charset=" + charset;
  }
  return "data:" + mime + charset + ";base64," + (data.toString('base64'));
};

jsfy.cssfy = function(devalJs) {
  var begin, dataurl, end;
  begin = devalJs.indexOf('data:text/css;');
  end = devalJs.indexOf('"', begin) - begin;
  dataurl = (new Buffer(devalJs.substr(begin, end), 'base64')).toString('utf8');
  return (new Buffer(devalJs.substr(begin, end).split(',')[1], 'base64')).toString();
};

jsfy.replaceLocalPattern = /url\((?!(["']?(data|http))).+?\)/g;

jsfy.replaceGlobalPattern = /url\((?!(["']?(data))).+?\)/g;

jsfy.replaceToDataURI = function() {
  var args, async, callback, file, matches, options, pattern, str;
  file = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  callback = void 0;
  pattern = void 0;
  options = {};
  args.forEach(function(arg) {
    switch (typeof arg) {
      case 'function':
        return callback = arg;
      case 'string':
        return pattern = arg;
      case 'object':
        return options = arg;
    }
  });
  if (pattern === void 0) {
    pattern = options.ignoreURL ? jsfy.replaceLocalPattern : jsfy.replaceGlobalPattern;
  }
  str = file.contents.toString();
  matches = str.match(pattern) || [];
  async = require('async');
  return async.map(matches, function(match, next) {
    var begin, end, is_local, schema;
    begin = match.indexOf('(') + 1;
    end = match.length - begin - 1;
    schema = match.substr(begin, end).replace(/"|'/g, '');
    is_local = schema.indexOf('http') !== 0;
    if (is_local) {
      schema = path.resolve(path.dirname(file.path), schema);
    }
    if (is_local) {
      schema = schema.replace(/(\?#\w+|#\w+)$/, '');
      return jsfy.readDataURI(schema, function(error, datauri) {
        str = str.replace(match, "url(" + datauri + ")");
        return next(error);
      });
    } else {
      return jsfy.fetchDataURI(schema, function(error, datauri) {
        str = str.replace(match, "url(" + datauri + ")");
        return next(error);
      });
    }
  }, function(error) {
    return callback(error, str);
  });
};

jsfy.readDataURI = function(filename, callback) {
  var fs;
  fs = require('fs');
  return fs.readFile(filename, function(error, buffer) {
    var data, mime;
    if (error === null) {
      mime = require('mime').lookup(filename);
      data = buffer.toString('base64');
      return callback(null, "data:" + mime + ";base64," + data);
    } else {
      return callback(error);
    }
  });
};

jsfy.fetchDataURI = function(url, callback) {
  var http;
  http = require('http');
  return http.get(url, function(response) {
    return response.on('data', function(buffer) {
      var data, mime, _ref;
      mime = response != null ? (_ref = response.headers) != null ? _ref['content-type'] : void 0 : void 0;
      data = buffer.toString('base64');
      return callback(null, "data:" + mime + ";base64," + data);
    });
  }).on('error', function(error) {
    return callback(error);
  });
};

jsfy.wrap = function() {
  var args, callback, change, className, css, file, options, stylus;
  file = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  callback = void 0;
  className = void 0;
  options = {};
  args.forEach(function(arg) {
    switch (typeof arg) {
      case 'function':
        return callback = arg;
      case 'string':
        return className = arg;
      case 'object':
        return options = arg;
    }
  });
  change = require('change-case');
  css = file.contents.toString();
  className = change.snakeCase(path.basename(file.path, '.css'));
  stylus = require('stylus');
  return stylus.render("." + className + "{ " + css + " }", function(error, css) {
    return callback(error, css);
  });
};

module.exports = jsfy;
